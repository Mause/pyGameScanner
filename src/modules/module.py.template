#!/usr/bin/env python

import struct, socket, time, json, traceback, StringIO
from netaddr import IPNetwork
from twisted.internet.protocol import DatagramProtocol
from twisted.internet.task import LoopingCall
from twisted.internet import reactor

class ModuleName(DatagramProtocol):
    def __init__(self):
        self.loadDefaults()
        self.serverDict = {}

    def loadDefaults(self):
        self.jsonRoot = "../www/JSON/"
        self.pingDelay = 10.0
        self.moduleEnabled = True

    def loadConfig(self, config):
        moduleEnabled = config.get("ModuleName", "moduleEnabled")
        if moduleEnabled == "False" :
            self.moduleEnabled = False
            return
        else :
            self.jsonRoot = config.get("global", "jsonRoot")
            self.moduleEnabled = True
        
        
        pingDelay = config.get("ModuleName", "pingDelay")
        if pingDelay :
            self.pingDelay = float(pingDelay)

    def startCrawler(self):
        if self.moduleEnabled :
            reactor.listenUDP(0, self)
            self.pingerTask = LoopingCall(self.serverPinger)
            self.pingerTask.start(self.pingDelay)

    def serverPinger(self):
        try:
            filePointer = open(self.jsonRoot + "ModuleName.json", 'w')
            filePointer.write(json.dumps(self.serverDict))
            filePointer.close()
            
            # Send request data to server here

    def datagramReceived(self, serverResponse, serverInfo):
        # procedd recieved packet
        pass
    
def startConfig(config):
    moduleConfig = {}
    moduleConfig["moduleName"] = "ModuleName"
    moduleConfig["moduleTitle"] = "ModuleTitle"
    moduleConfig["defaultEnabled"] = "true"
    moduleConfig["refreshTime"] = "10"
    
    config.add_section("ModuleName")
    while True:
        value = raw_input("Would you like the scanner for Counter Strike to be activated? (Y/N) :")
        if value == "Y" or value == "y" :
            config.set("ModuleName", "moduleEnabled", "true")
            break
        elif value == "N" or value == "n" :
            config.set("ModuleName", "moduleEnabled", "false")
            return moduleConfig
        else :
            print "Please enter either Y or N"
                
    print "Please enter the delay for checking the server. Between 1 and 3600 Seconds :"
    while True:
        value = raw_input("Enter delay : ")
        try :
            test = int(value)
            if test >= 1 and test <= 3600:
                config.set("ModuleName", "pingDelay", value)
                moduleConfig["refreshTime"] = value
                break
            else :
                print "Please enter a number between 1 and 3600"
        except :
            print value, "is not a valid number"
    return moduleConfig

def startModule(config):
    crawler = ModuleName()
    crawler.loadConfig(config)
    crawler.startCrawler()

if __name__ == "__main__":
    startModule(None)
    reactor.run()
